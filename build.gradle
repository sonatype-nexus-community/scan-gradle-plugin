plugins {
  id 'net.researchgate.release' version '3.0.0'
  id 'com.gradle.plugin-publish' version '1.3.0'
  id 'org.jreleaser' version '1.15.0'
}

apply from: 'gradle/integration-test.gradle'

// Plugin publishing configuration
def pluginDescription = 'Scan, evaluate and audit Gradle projects using Sonatype platforms'
def pluginUrl = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'

gradlePlugin {
  plugins {
    scan {
      id = 'org.sonatype.gradle.plugins.scan'
      implementationClass = 'org.sonatype.gradle.plugins.scan.ScanPlugin'
      displayName = project.name
      description = pluginDescription
      website = pluginUrl
      vcsUrl = pluginUrl
      tags.set(['sonatype', 'scan', 'dependencies', 'ossindex', 'iq server', 'lifecycle'])
      System.setProperty('gradle.publish.key', System.getenv('GRADLE_PUBLISH_KEY') ?: '')
      System.setProperty('gradle.publish.secret', System.getenv('GRADLE_PUBLISH_SECRET') ?: '')
    }
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_11
  targetCompatibility = JavaVersion.VERSION_11
  withJavadocJar()
  withSourcesJar()
}

if (JavaVersion.current() != targetCompatibility) {
  throw new GradleException(
      "The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
}

jar {
  manifest {
    attributes(
      'Build-Timestamp' : new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"),
      'Build-Revision'  : project.version,
      'Built-By'        : 'Sonatype',
      'Created-By'      : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'       : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
    )
  }
}

allprojects {
  repositories {
    mavenCentral()
  }
}

ext {
  nexusPlatformApiVersion='5.1.2-01'
  ossIndexClientVersion='1.8.2'
  logbackVersion='1.3.14'
  commonsIoVersion='2.16.1'

  junitVersion='4.13.2'
  mockitoVersion='5.12.0'
  assertJVersion='3.25.3'
}

dependencies {
  implementation "com.sonatype.nexus:nexus-platform-api:$nexusPlatformApiVersion"
  implementation "org.sonatype.ossindex:ossindex-service-client:$ossIndexClientVersion"
  implementation "ch.qos.logback:logback-classic:$logbackVersion"
  implementation "commons-io:commons-io:$commonsIoVersion"

  testImplementation gradleTestKit()
  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.assertj:assertj-core:$assertJVersion"
  testImplementation "org.mockito:mockito-core:${mockitoVersion}"
}

processResources {
  filesMatching('com/sonatype/insight/client.properties') {
    expand(project.properties)
  }
}

test {
  maxHeapSize = '512m'
}

publishing {
  publications {
    withType(MavenPublication) {
      groupId = 'org.sonatype.gradle.plugins'
      artifactId = project.name
      version = project.version.toString()

      pom {
        name = project.name
        description = pluginDescription
        url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
        organization {
          name = 'Sonatype'
          url = 'https://www.sonatype.com'
        }
        issueManagement {
          system = 'GitHub'
          url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin/issues'
        }
        licenses {
          license {
            name = 'The Apache Software License, Version 2.0'
            url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution = 'repo'
          }
        }
        scm {
          connection = 'scm:git:git://github.com/sonatype-nexus-community/scan-gradle-plugin.git'
          developerConnection = 'scm:git:ssh://git@github.com:sonatype-nexus-community/scan-gradle-plugin.git'
          url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
        }
        developers {
          developer {
            name = 'Guillermo Varela'
          }
          developer {
            name = 'Usman Shaikh'
          }
        }
      }
    }
  }
  repositories {
    maven {
      url = layout.buildDirectory.dir('staging-deploy')
    }
  }
}

jreleaser {
  project {
    name = 'scan-gradle-plugin'
    description = pluginDescription
    website = pluginUrl
  }
  signing {
    active = 'ALWAYS'
    armored = true
    def publicKey = System.getenv('JRELEASER_GPG_PUBLIC_KEY')?.decodeBase64() ?
        new String(System.getenv('JRELEASER_GPG_PUBLIC_KEY').decodeBase64()) : ''
    def secretKey = System.getenv('JRELEASER_GPG_SECRET_KEY')?.decodeBase64() ?
        new String(System.getenv('JRELEASER_GPG_SECRET_KEY').decodeBase64()) : ''

    if (publicKey) {
      System.setProperty('jreleaser.gpg.public.key', publicKey)
    }
    if (secretKey) {
      System.setProperty('jreleaser.gpg.secret.key', secretKey)
    }
  }
  deploy {
    maven {
      mavenCentral {
        sonatype {
          active = 'ALWAYS'
          url = 'https://central.sonatype.com/api/v1/publisher'
          verifyPom = false
          stagingRepository('build/staging-deploy')
        }
      }
    }
  }
}

// Remove unwanted "scan" directory after publishing
tasks.register('cleanupUnwantedArtifacts') {
  doLast {
    def unwantedDir = file("build/staging-deploy/org/sonatype/gradle/plugins/scan")
    if (unwantedDir.exists()) {
      println "Removing unwanted directory: $unwantedDir"
      delete unwantedDir
    }
  }
}

afterReleaseBuild.dependsOn publish
publish.finalizedBy cleanupUnwantedArtifacts
publish.finalizedBy publishPlugins
