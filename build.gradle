plugins {
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'net.researchgate.release' version '2.6.0'
}

apply plugin: 'maven'

gradlePlugin {
  plugins {
    scan {
      id = 'org.sonatype.gradle.plugins.scan'
      implementationClass = 'org.sonatype.gradle.plugins.scan.ScanPlugin'
    }
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
  manifest {
    attributes(
      'Build-Timestamp' : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
      'Build-Revision'  : project.version,
      'Built-By'        : 'Sonatype',
      'Created-By'      : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'       : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
    )
  }
}

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}

repositories {
  mavenCentral()
}

dependencies {
  localGroovy()
  gradleApi()

  implementation "com.sonatype.nexus:nexus-platform-api:$nexusJavaApiVersion:internal"

  testCompile gradleTestKit()
  testCompile "junit:junit:$junitVersion"
  testCompile "org.assertj:assertj-core:$assertJVersion"
  testCompile "commons-io:commons-io:$commonsIoVersion"
  testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
  testCompile "org.powermock:powermock-api-mockito2:$powermockVersion"
  
}

sourceSets {
  integrationTest {
    java.srcDir file('src/integTest/java')
    resources.srcDir file('src/integTest/resources')
    compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
    runtimeClasspath += output + compileClasspath
  }
}

processResources {
  filesMatching('com/sonatype/insight/client.properties') {
      expand(project.properties)
  }
}

test {
  maxHeapSize = '512m'
}

task integrationTest(type: Test) {
  description = 'Runs the integration tests.'
  group = 'verification'
  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath
  maxHeapSize = '1536m'
  mustRunAfter test
}

check.dependsOn integrationTest

ext.deployment = [
    release: [
        // for local testing
        //url: 'http://192.168.1.233:8081/nexus/service/local/staging/deploy/maven2/',
        url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/',
    ],
    snapshot: [
        url: 'https://oss.sonatype.org/content/repositories/snapshots',
    ]
]

// configure deployment for releases and snapshots if configuration is present
if (project.hasProperty('deployment')) {
  publishing {
    repositories {
      maven {
        def releasesRepoUrl = deployment.release.url
        def snapshotsRepoUrl = deployment.snapshot.url
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        credentials {
          username = System.getenv('SONATYPE_USERNAME')
          password = System.getenv('SONATYPE_PASSWORD')
        }
      }
    }
    
    afterEvaluate {
      publications {
        withType(MavenPublication) {
          pom {
            name = project.name
            description = 'Scan, evaluate and audit Gradle projects using Sonatype platforms'
            url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
            organization {
              name = 'Sonatype'
              url = 'https://www.sonatype.org'
            }
            issueManagement {
              system = 'GitHub'
              url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin/issues'
            }
            licenses {
              license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
              }
            }
            scm {
              connection = 'scm:git:git://github.com/sonatype-nexus-community/scan-gradle-plugin.git'
              developerConnection = 'scm:git:ssh://git@github.com:sonatype-nexus-community/scan-gradle-plugin.git'
              url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
            }
            developers {
              developer {
                name = 'Guillermo Varela'
              }
              developer {
                name = 'Usman Shaikh'
              }
            }
          }
  
          artifactId = project.name
  
          artifact(sourceJar) {
            classifier = 'sources'
          }
  
          artifact(javadocJar) {
            classifier = 'javadoc'
          }
        }
      }

      signing {
        allprojects {
          useGpgCmd()
          ext."signing.gnupg.executable" = System.getenv('GPG_EXECUTABLE')
          ext."signing.gnupg.keyName" = System.getenv('GPG_KEYNAME')
          ext."signing.gnupg.passphrase" = System.getenv('GPG_PASSPHRASE')

          // try getting release plugin gpg happy
          ext."signing.keyId"=System.getenv('GPG_KEYNAME')
          ext."signing.password"=System.getenv('GPG_PASSPHRASE')
          ext."signing.secretKeyRingFile"='/home/circleci/.gnupg/trustdb.gpg'

          useInMemoryPgpKeys(System.getenv('ENV_GPG_KEY'), System.getenv('GPG_PASSPHRASE'))
        }

        sign publishing.publications.pluginMaven
        sign publishing.publications.scanPluginMarkerMaven
      }
    }
  }

  afterReleaseBuild.dependsOn publish
}
