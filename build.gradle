plugins {
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'net.researchgate.release' version '2.8.1'
  id 'io.codearte.nexus-staging' version '0.21.2'
  id "com.gradle.plugin-publish" version "0.10.1"
}

apply plugin: 'maven'
apply from: 'gradle/integration-test.gradle'

def pluginDescription = 'Scan, evaluate and audit Gradle projects using Sonatype platforms'

gradlePlugin {
  plugins {
    scan {
      id = 'org.sonatype.gradle.plugins.scan'
      implementationClass = 'org.sonatype.gradle.plugins.scan.ScanPlugin'
      displayName = project.name
      description = pluginDescription
    }
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
}

jar {
  manifest {
    attributes(
      'Build-Timestamp' : new java.text.SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ").format(new Date()),
      'Build-Revision'  : project.version,
      'Built-By'        : 'Sonatype',
      'Created-By'      : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'       : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
    )
  }
}

task sourceJar(type: Jar) {
  classifier "sources"
  from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier "javadoc"
  from javadoc.destinationDir
}

artifacts {
  archives jar
  archives sourceJar
  archives javadocJar
}

repositories {
  mavenCentral()
}

dependencies {
  localGroovy()
  gradleApi()

  implementation "com.sonatype.nexus:nexus-platform-api:$nexusJavaApiVersion:internal"
  implementation "org.sonatype.ossindex:ossindex-service-client:$ossIndexClientVersion"

  testCompile gradleTestKit()
  testCompile "junit:junit:$junitVersion"
  testCompile "org.assertj:assertj-core:$assertJVersion"
  testCompile "commons-io:commons-io:$commonsIoVersion"
  testCompile "org.powermock:powermock-module-junit4:$powermockVersion"
  testCompile "org.powermock:powermock-api-mockito2:$powermockVersion"
  
}

processResources {
  filesMatching('com/sonatype/insight/client.properties') {
      expand(project.properties)
  }
}

test {
  maxHeapSize = '512m'
}

// configure deployment if performing release
if ('do-release'.equals(System.getenv('CIRCLE_JOB'))) {
  publishing {
    afterEvaluate {
      def pluginUrl = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'

      pluginBundle {
        website = pluginUrl
        vcsUrl = pluginUrl
        description = pluginDescription
        tags = ['sonatype', 'scan', 'dependencies', 'ossindex', 'iq server']
        System.setProperty('gradle.publish.key', System.getenv('GRADLE_PUBLISH_KEY'))
        System.setProperty('gradle.publish.secret', System.getenv('GRADLE_PUBLISH_SECRET'))
      }

      release {
        // avoid infinite CircleCI builds triggered by release commits
        preCommitText = '[skip ci] '
      }

      def sonatypeUsername = System.getenv('SONATYPE_USERNAME')
      def sonatypePassword = System.getenv('SONATYPE_PASSWORD')

      def serverUrlBase = 'https://repository.sonatype.org:443/service/local/'

      repositories {
        maven {
          name = 'rso'
          url = serverUrlBase + 'staging/deploy/maven2/'
          credentials {
            username = sonatypeUsername
            password = sonatypePassword
          }
        }
      }

      nexusStaging {
        serverUrl = serverUrlBase
        stagingProfileId = '97306992c3c7ca'
        username = sonatypeUsername
        password = sonatypePassword
        numberOfRetries = 40
        delayBetweenRetriesInMillis = 5000
      }

      publications {
        withType(MavenPublication) {
          pom {
            name = project.name
            description = pluginDescription
            url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
            organization {
              name = 'Sonatype'
              url = 'https://www.sonatype.org'
            }
            issueManagement {
              system = 'GitHub'
              url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin/issues'
            }
            licenses {
              license {
                name = 'The Apache Software License, Version 2.0'
                url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                distribution = 'repo'
              }
            }
            scm {
              connection = 'scm:git:git://github.com/sonatype-nexus-community/scan-gradle-plugin.git'
              developerConnection = 'scm:git:ssh://git@github.com:sonatype-nexus-community/scan-gradle-plugin.git'
              url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
            }
            developers {
              developer {
                name = 'Guillermo Varela'
              }
              developer {
                name = 'Usman Shaikh'
              }
            }
          }
  
          artifactId = project.name
  
          artifact(sourceJar) {
            classifier = 'sources'
          }
  
          artifact(javadocJar) {
            classifier = 'javadoc'
          }
        }
      }

      signing {
        def final encodedKey = System.getenv('SECRING_GPG_ASC_BASE64')
        def final signingKey = new String(encodedKey.decodeBase64())
        allprojects {
          println 'setup gpg signing with in-memory key'
          useInMemoryPgpKeys(
              signingKey,
              System.getenv('GPG_PASSPHRASE')
          )
        }

        sign publishing.publications.pluginMaven
        sign publishing.publications.scanPluginMarkerMaven
      }
    }
  }

  afterReleaseBuild.dependsOn publish
  publish.finalizedBy closeAndReleaseRepository
  publish.finalizedBy publishPlugins
}
