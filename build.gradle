import com.github.jengelman.gradle.plugins.shadow.tasks.ConfigureShadowRelocation

plugins {
  id 'java-gradle-plugin'
  id 'maven-publish'
  id 'signing'
  id 'net.researchgate.release' version '2.8.1'
  id 'io.codearte.nexus-staging' version '0.30.0'
  id 'com.gradle.plugin-publish' version '0.14.0'
  id 'com.github.johnrengelman.shadow' version '6.1.0'
}

apply from: 'gradle/integration-test.gradle'

def pluginDescription = 'Scan, evaluate and audit Gradle projects using Sonatype platforms'

gradlePlugin {
  plugins {
    scan {
      id = 'org.sonatype.gradle.plugins.scan'
      implementationClass = 'org.sonatype.gradle.plugins.scan.ScanPlugin'
      displayName = project.name
      description = pluginDescription
    }
  }
}

java {
  sourceCompatibility = JavaVersion.VERSION_1_8
  targetCompatibility = JavaVersion.VERSION_1_8
  withJavadocJar()
  withSourcesJar()
}

if (JavaVersion.current() != targetCompatibility) {
  throw new GradleException(
      "The java version used ${JavaVersion.current()} is not the expected version ${project.targetCompatibility}.")
}

jar {
  manifest {
    attributes(
      'Build-Timestamp' : new Date().format("yyyy-MM-dd'T'HH:mm:ss.SSSZ"),
      'Build-Revision'  : project.version,
      'Built-By'        : 'Sonatype',
      'Created-By'      : "Gradle ${gradle.gradleVersion}",
      'Build-Jdk'       : "${System.properties['java.version']} (${System.properties['java.vendor']} ${System.properties['java.vm.version']})",
    )
  }
}

shadowJar {
  mergeServiceFiles()
  archiveClassifier.set('')
}

task relocateShadowJar(type: ConfigureShadowRelocation) {
  dependsOn(':nexus-platform-api:shadowJar')
  target = tasks.shadowJar
}

tasks.shadowJar.dependsOn tasks.relocateShadowJar

artifacts {
  archives shadowJar
}

allprojects {
  repositories {
    mavenCentral()
  }
}

// Compiles and shades the nexus-platform-api before compiling the plugin project
tasks.compileJava.dependsOn(':nexus-platform-api:shadowJar')

dependencies {
  shadow localGroovy()
  shadow gradleApi()

  implementation files ("nexus-platform-api/build/libs/nexus-platform-api-${version}.jar")
  implementation "org.sonatype.ossindex:ossindex-service-client:$ossIndexClientVersion"
  implementation "io.github.openfeign:feign-core:$feignVersion"
  implementation "io.github.openfeign:feign-gson:$feignVersion"
  implementation "com.google.code.gson:gson:$gsonVersion"

  testImplementation gradleTestKit()
  testImplementation "junit:junit:$junitVersion"
  testImplementation "org.assertj:assertj-core:$assertJVersion"
  testImplementation "commons-io:commons-io:$commonsIoVersion"
  testImplementation "org.powermock:powermock-module-junit4:$powermockVersion"
  testImplementation "org.powermock:powermock-api-mockito2:$powermockVersion"
  testImplementation "com.github.ardenliu:arden-file:$ardenFileVersion"
}

processResources {
  filesMatching('nexus/shadow/com/sonatype/insight/client.properties') {
      expand(project.properties)
  }
}

test {
  maxHeapSize = '512m'
}

sourceSets {
  test {
    // Groovy and Gradle libraries on the new shadow configuration need to be available for tests
    compileClasspath = configurations.shadow + compileClasspath
    runtimeClasspath = configurations.shadow + runtimeClasspath
  }
}

publishing {
  afterEvaluate {
    def pluginUrl = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'

    pluginBundle {
      website = pluginUrl
      vcsUrl = pluginUrl
      description = pluginDescription
      tags = ['sonatype', 'scan', 'dependencies', 'ossindex', 'iq server']
      System.setProperty('gradle.publish.key', System.getenv('GRADLE_PUBLISH_KEY') ?: '')
      System.setProperty('gradle.publish.secret', System.getenv('GRADLE_PUBLISH_SECRET') ?: '')
    }

    release {
      // avoid infinite CircleCI builds triggered by release commits
      preCommitText = '[skip ci] '
      buildTasks = ['assemble']
      git {
        requireBranch = 'main'
      }
    }

    def sonatypeUsername = System.getenv('SONATYPE_USERNAME')
    def sonatypePassword = System.getenv('SONATYPE_PASSWORD')

    def serverUrlBase = 'https://repository.sonatype.org:443/service/local/'

    repositories {
      maven {
        name = 'rso'
        url = serverUrlBase + 'staging/deploy/maven2/'
        credentials {
          username = sonatypeUsername
          password = sonatypePassword
        }
      }
    }

    nexusStaging {
      serverUrl = serverUrlBase
      stagingProfileId = '97306992c3c7ca'
      username = sonatypeUsername
      password = sonatypePassword
      numberOfRetries = 40
      delayBetweenRetriesInMillis = 5000
    }

    publications {
      shadow(MavenPublication) { publication ->
        project.shadow.component(publication)
      }

      withType(MavenPublication) {
        pom {
          name = project.name
          description = pluginDescription
          url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
          organization {
            name = 'Sonatype'
            url = 'https://www.sonatype.org'
          }
          issueManagement {
            system = 'GitHub'
            url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin/issues'
          }
          licenses {
            license {
              name = 'The Apache Software License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
            }
          }
          scm {
            connection = 'scm:git:git://github.com/sonatype-nexus-community/scan-gradle-plugin.git'
            developerConnection = 'scm:git:ssh://git@github.com:sonatype-nexus-community/scan-gradle-plugin.git'
            url = 'https://github.com/sonatype-nexus-community/scan-gradle-plugin'
          }
          developers {
            developer {
              name = 'Guillermo Varela'
            }
            developer {
              name = 'Usman Shaikh'
            }
          }
        }

        artifactId = project.name
      }
    }

    // configure signing if performing release
    if ('do-release' == System.getenv('CIRCLE_JOB')) {
      signing {
        def final encodedKey = System.getenv('SECRING_GPG_ASC_BASE64')
        def final signingKey = new String(encodedKey.decodeBase64())
        allprojects {
          println 'setup gpg signing with in-memory key'
          useInMemoryPgpKeys(
              signingKey,
              System.getenv('GPG_PASSPHRASE')
          )
        }

        sign publishing.publications.pluginMaven
        sign publishing.publications.shadow
        sign publishing.publications.scanPluginMarkerMaven
      }
    }
  }
}

afterReleaseBuild.dependsOn publish
publish.finalizedBy closeAndReleaseRepository
publish.finalizedBy publishPlugins
