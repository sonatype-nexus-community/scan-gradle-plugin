/*
 * Copyright (c) 2020-present Sonatype, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.sonatype.gradle.plugins.scan.ossindex;

import java.net.URI;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;

import org.sonatype.goodies.packageurl.PackageUrl;
import org.sonatype.goodies.packageurl.PackageUrlBuilder;
import org.sonatype.ossindex.service.api.componentreport.ComponentReport;
import org.sonatype.ossindex.service.api.componentreport.ComponentReportVulnerability;

import com.google.common.collect.ImmutableSet;
import org.assertj.core.util.Lists;
import org.junit.Before;
import org.junit.Test;

import static org.assertj.core.api.Assertions.assertThat;

public class VulnerabilityExclusionFilterTest
{
  private static final PackageUrl COORDINATE1 = new PackageUrlBuilder()
      .type("maven")
      .namespace("ns1")
      .name("n1")
      .version("v1")
      .build();

  private static final PackageUrl COORDINATE2 = new PackageUrlBuilder()
      .type("maven")
      .namespace("ns2")
      .name("n2")
      .version("v2")
      .build();

  private static final String VULNERABILITY_ID = "HHH-123";

  private static final Set<String> VULNERABILITY_IDS_TO_EXCLUDE = ImmutableSet.of(VULNERABILITY_ID);

  private static final Set<PackageUrl> COORDINATES_TO_EXCLUDE = ImmutableSet.of(COORDINATE1);

  private VulnerabilityExclusionFilter filter;

  @Before
  public void setup() {
    filter = new VulnerabilityExclusionFilter(VULNERABILITY_IDS_TO_EXCLUDE, COORDINATES_TO_EXCLUDE);
  }

  @Test
  public void testApply_excludeByCoordinate() throws Exception {
    ComponentReportVulnerability vulnerability1 = new ComponentReportVulnerability();
    vulnerability1.setId("ABC-123");
    vulnerability1.setTitle("Title 1");
    vulnerability1.setCvssScore(4f);
    vulnerability1.setReference(new URI("http://test/123"));

    ComponentReportVulnerability vulnerability2 = new ComponentReportVulnerability();
    vulnerability2.setId("DEF-456");
    vulnerability2.setTitle("Title 2");
    vulnerability2.setCvssScore(6f);
    vulnerability2.setReference(new URI("http://test/456"));

    ComponentReportVulnerability vulnerability3 = new ComponentReportVulnerability();
    vulnerability2.setId("XXX-111");
    vulnerability2.setTitle("Title 3");
    vulnerability2.setCvssScore(4f);
    vulnerability2.setReference(new URI("http://test/111"));

    Map<PackageUrl, ComponentReport> report = new HashMap<>();
    report.put(COORDINATE1, setupComponentReport(COORDINATE1, vulnerability1, vulnerability2));
    report.put(COORDINATE2, setupComponentReport(COORDINATE2, vulnerability3));

    filter.apply(report);
    assertThat(report).containsOnlyKeys(COORDINATE1, COORDINATE2);
    assertThat(report.get(COORDINATE1).getVulnerabilities()).isEmpty();
    assertThat(report.get(COORDINATE2).getVulnerabilities()).containsOnly(vulnerability3);
  }

  @Test
  public void testApply_excludeByVulnerabilityId() throws Exception {
    ComponentReportVulnerability vulnerability1 = new ComponentReportVulnerability();
    vulnerability1.setId(VULNERABILITY_ID);
    vulnerability1.setTitle("Title 1");
    vulnerability1.setCvssScore(4f);
    vulnerability1.setReference(new URI("http://test/123"));

    ComponentReportVulnerability vulnerability2 = new ComponentReportVulnerability();
    vulnerability2.setId("DEF-456");
    vulnerability2.setTitle("Title 2");
    vulnerability2.setCvssScore(6f);
    vulnerability2.setReference(new URI("http://test/456"));

    Map<PackageUrl, ComponentReport> report = new HashMap<>();
    report.put(COORDINATE2, setupComponentReport(COORDINATE2, vulnerability1, vulnerability2));

    filter.apply(report);
    assertThat(report).containsOnlyKeys(COORDINATE2);
    assertThat(report.get(COORDINATE2).getVulnerabilities()).doesNotContain(vulnerability1);
    assertThat(report.get(COORDINATE2).getVulnerabilities()).containsOnly(vulnerability2);
  }


  private ComponentReport setupComponentReport(PackageUrl coordinate, ComponentReportVulnerability... vulnerabilities) {
    ComponentReport componentReport = new ComponentReport();
    componentReport.setCoordinates(coordinate);
    componentReport.setVulnerabilities(Lists.newArrayList(vulnerabilities));
    return componentReport;
  }
}
